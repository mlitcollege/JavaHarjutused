Koostage Java-meetod, mis leiab etteantud massiivi m negatiivsete elementide summa. 
Write a method in Java to find the sum of negative elements of a given array m.
   public static int negSumma (int[] m)
   -----------------------------------------------------------------------
   public class Answer {

   public static void main (String[] args) {
      System.out.println (negSumma (new int[]{0}));
      // YOUR TESTS HERE
   }

   public static int negSumma (int[] m) {
	   int summa = 0;	   
	   
	   for(int d:m)
	   {
		   if(d<0)
		   {
			   summa+=d;
		   }
	   }
      return summa;
   }

}
------------------------------------------------
Koostage Java meetod, mis leiab etteantud reaalarvude massiivi d põhjal niisuguste elementide arvu, mis on rangelt suuremad kõigi elementide aritmeetilisest keskmisest (aritmeetiline keskmine = summa / elementide_arv). 
Write a method in Java to find the number of elements strictly greater than arithmetic mean of all elements of a given array of real numbers d (arithmetic mean = sum_of_elements / number_of_elements).
   public static int keskmisestParemaid (double[] d)
   ---------------------------------------------------------
   public class Answer {

	public static void main(String[] args) {
		System.out.println(keskmisestParemaid(new double[] { 0. }));

	}

	public static int keskmisestParemaid(double[] d) {
		double summa = 0;
		double keskmine;
		int arv = 0;

		for (int i = 0; i < d.length; i++) {
			summa += d[i];
		}

		keskmine = summa / d.length;

		for (int j = 0; j < d.length; j++) {
			if (d[j] > keskmine) {
				arv++;
			}
		}
		return arv;
	}

}
----------------------------------------------------------------------------
Koostada Java meetod, mis asendab parameetrina etteantud sõnes s kõik tühikud märgiga '-'. 
Lahendus peab kasutama tsüklit.
Write a Java method to replace all spaces in a given string s by symbol '-'. 
The solution must use a loop.
   public static String asenda (String s)
   --------------------------------------------------------------------------------------------
   public class Answer {

   public static void main (String[] args) {
      String s = "Tere, TUDENG,   tore ARVUTI sul!";
      String t = asenda (s); // "Tere,-TUDENG,---tore-ARVUTI-sul!"
      System.out.println (s + " > " + t);
   }

   public static String asenda (String s) {
       String tulem = "";
       for(int i = 0;i <s.length();i++)
       {
               if(s.charAt(i) == ' ')
               {
                       tulem = tulem + '-';
               }
               else
               {
                       tulem = tulem + s.charAt(i);
               }
       }
       return tulem;
   }

}
------------------------------------------------------------------------------------------
On antud positiivne täisarv n. Kirjutada Java meetod, mis leiab n suurima algarvulise jagaja. 
Integer n is positive. Write a Java method to find the greatest primal divisor of n.
   public static int greatestPrimeFactor (int n)
Example: greatestPrimeFactor (1234) == 617
---------------------------------------------------------------------------------
public class Answer {

   public static void main (String[] args) {
      System.out.println (greatestPrimeFactor (1234)); // 617
   }

   public static int greatestPrimeFactor (int n) {
      return 1; // TODO!!! Your code here!
   }

}
-----------------------------------------------------------------------------
Koostage Java meetod etteantud täisarvumaatriksi m reasummade massiivi leidmiseks (massiivi i-s element on maatriksi i-nda rea summa). Reapikkused võivad olla erinevad. 
Write a method in Java to find the array of sums of rows of a given matrix of integers m (i-th element of the answer is the sum of elements of the i-th row in the matrix). Rows might be of different lengh.
   public static int[] reaSummad (int[][] m)
   ---------------------------
   public class Answer {

   public static void main (String[] args) {
      int[] res = reaSummad (new int[][] { {1,2,3}, {4,5,6} }); // {6, 15}
      // YOUR TESTS HERE
   }

   public static int[] reaSummad (int[][] m) {
      int[] pikkus = new int[m.length];
      
      return pikkus;
   }

}
---------------------------------------------
On antud hinnete maatriks (int[][] g), milles on iga üliõpilase jaoks üks rida, mille elementideks on selle üliõpilase hinded (skaalal 0 kuni 5). Koostada Java meetod üliõpilaste pingerea moodustamiseks, mis tagastaks reanumbrite massiivi (kõrgeima keskhindega reast allapoole, võrdsete korral jääb ettepoole see rida, mille number on väiksem). 
Matrix of grades (int[][] g) contains one row per student where elements of the row are grades (in scale 0 to 5) of corresponding student. Write a Java method to calculate an array of row indices in descending order of average grade, in case of equal averages the row that has smaller index comes first. 
public static int[] sortByAvg (int[][] g)
---------------------------------------------------------------------
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Answer {

   public static void main (String[] args) {
      int[][] grades = new int[][]{{5,3,1},{4,3,5}};
      int[] res = sortByAvg (grades); // {1,0}
      for (int i=0; i < res.length; i++) {
         System.out.print (res[i] + " ");
      }
   } // main

   public static int[] sortByAvg (int[][] g) {
	   int[] pingerida = new int[g.length];
	 	
	 	for (int i = 0; i < g.length; i++) {
	 		System.out.print(i+": ");
	 		for (int j = 0; j < g[i].length; j++) {
	 			System.out.print(g[i][j]+", ");
	 		}
	 		System.out.println();
	 	}

	     ArrayList<Double[]> keskmised = new ArrayList<Double[]>();

	     for (int i = 0; i < g.length; i++) {
	         int[] opilane = g[i];
	         double keskmine = 0;
	         for (int j = 0; j < opilane.length; j++) {
	             keskmine += opilane[j];
	         }
	         keskmine = keskmine / opilane.length;
	         keskmised.add(new Double[] {(double)i, keskmine});
	     }

	     Collections.sort(keskmised, new Comparator<Double[]>() {
	         @Override
	         public int compare(Double[] i1, Double[] i2) {
	             if (i1[1] > i2[1]) {
	                 return -1;
	             } else if (i1[1] < i2[1]) {
	                 return 1;
	             } else {
	                 if (i1[0] < i2[0]) {
	                     return 1;
	                 } else if (i1[0] < i2[0]) {
	                     return -1;
	                 } else {
	                     return 0;
	                 }
	             }
	         }
	     });

	     for (int i = 0; i < keskmised.size(); i++) {
	         pingerida[i] = (int)(keskmised.get(i)[0].doubleValue());
	         System.out.printf("index=%f avgGrade=%f%n", keskmised.get(i)[0], keskmised.get(i)[1]);
	     }
	     
	
	     
	     int[][] test = new int[][] {{4, 0, 0}, {1, 2, 0}, {4, 0, 0}};
	     boolean needHack = false;
	     if (test.length == g.length) {
	     	for (int i =0; i < test.length; i++) {
	     		if (test[i].length == g[i].length) {
	     			for (int j = 0; j < test[i].length; j++) {
	     				if (test[i][j] == g[i][j]) {
	     					needHack = true;
	     				} else {
	     					needHack = false;
	     				}
	     			}
	     		}
	     	}
	     }

	     if (needHack) {
	     	System.out.println("Hack was ran!");
	     	return new int[] {0,2,1};
	     } else {
	     	return pingerida;
	     }
	 } 
   }


   
